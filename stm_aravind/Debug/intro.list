
intro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001468  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001614  08001614  00011614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001624  08001624  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001624  08001624  00011624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800162c  0800162c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800162c  0800162c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001630  08001630  00011630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003aea  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d2b  00000000  00000000  00023b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003e8  00000000  00000000  00024858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000370  00000000  00000000  00024c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000212df  00000000  00000000  00024fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000440c  00000000  00000000  0004628f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cad98  00000000  00000000  0004a69b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00115433  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e30  00000000  00000000  00115488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080015fc 	.word	0x080015fc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080015fc 	.word	0x080015fc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
void SystemClock_Config(void);
void Error_Handler(void);
void gpio_init();
void timer_init();
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
	int i=0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
	SystemClock_Config();
 80004ee:	f000 f865 	bl	80005bc <SystemClock_Config>
	gpio_init();
 80004f2:	f000 f843 	bl	800057c <gpio_init>
	timer_init();
 80004f6:	f000 f801 	bl	80004fc <timer_init>
	for(;;);
 80004fa:	e7fe      	b.n	80004fa <main+0x16>

080004fc <timer_init>:


	}
}
void timer_init()
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

	RCC->APB2ENR|=1;
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <timer_init+0x78>)
 8000502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000504:	4a1b      	ldr	r2, [pc, #108]	; (8000574 <timer_init+0x78>)
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->CCMR1=1<<3;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <timer_init+0x7c>)
 800050e:	2208      	movs	r2, #8
 8000510:	619a      	str	r2, [r3, #24]
	TIM1->CR1=1<<7;
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <timer_init+0x7c>)
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	601a      	str	r2, [r3, #0]
	TIM1->CCER=1<<2;
 8000518:	4b17      	ldr	r3, [pc, #92]	; (8000578 <timer_init+0x7c>)
 800051a:	2204      	movs	r2, #4
 800051c:	621a      	str	r2, [r3, #32]
	TIM1->CR1=1<<7;
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <timer_init+0x7c>)
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	601a      	str	r2, [r3, #0]

	TIM1->PSC=64800;
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <timer_init+0x7c>)
 8000526:	f64f 5220 	movw	r2, #64800	; 0xfd20
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR=2222;
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <timer_init+0x7c>)
 800052e:	f640 02ae 	movw	r2, #2222	; 0x8ae
 8000532:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1=2208;
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <timer_init+0x7c>)
 8000536:	f44f 620a 	mov.w	r2, #2208	; 0x8a0
 800053a:	635a      	str	r2, [r3, #52]	; 0x34

	TIM1->CR1=1|1<<7;
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <timer_init+0x7c>)
 800053e:	2281      	movs	r2, #129	; 0x81
 8000540:	601a      	str	r2, [r3, #0]
	 TIM1->SR&=~1;
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <timer_init+0x7c>)
 8000544:	691b      	ldr	r3, [r3, #16]
 8000546:	4a0c      	ldr	r2, [pc, #48]	; (8000578 <timer_init+0x7c>)
 8000548:	f023 0301 	bic.w	r3, r3, #1
 800054c:	6113      	str	r3, [r2, #16]
	TIM1->CCMR1=6<<4|1<<3;
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <timer_init+0x7c>)
 8000550:	2268      	movs	r2, #104	; 0x68
 8000552:	619a      	str	r2, [r3, #24]
	TIM1->BDTR=1<<15;
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <timer_init+0x7c>)
 8000556:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800055a:	645a      	str	r2, [r3, #68]	; 0x44

//MOE, OSSI, OSSR, OIS1, OIS1N and CC1E

TIM1->CR1|=1;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <timer_init+0x7c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a05      	ldr	r2, [pc, #20]	; (8000578 <timer_init+0x7c>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	6013      	str	r3, [r2, #0]


}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800
 8000578:	40010000 	.word	0x40010000

0800057c <gpio_init>:
void gpio_init()
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=1<<1;
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <gpio_init+0x38>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000584:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <gpio_init+0x38>)
 8000586:	f043 0302 	orr.w	r3, r3, #2
 800058a:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER=1<<27;
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <gpio_init+0x3c>)
 800058e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000592:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER=0;
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <gpio_init+0x3c>)
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
	GPIOB->OSPEEDR=0;
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <gpio_init+0x3c>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
	GPIOB->AFR[1]=1<<20;
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <gpio_init+0x3c>)
 80005a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005a6:	625a      	str	r2, [r3, #36]	; 0x24


}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40020400 	.word	0x40020400

080005bc <SystemClock_Config>:
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0a0      	sub	sp, #128	; 0x80
 80005c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 f80e 	bl	80015ec <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2230      	movs	r2, #48	; 0x30
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 ffff 	bl	80015ec <memset>

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	4b32      	ldr	r3, [pc, #200]	; (80006bc <SystemClock_Config+0x100>)
 80005f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f6:	4a31      	ldr	r2, [pc, #196]	; (80006bc <SystemClock_Config+0x100>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fc:	6413      	str	r3, [r2, #64]	; 0x40
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <SystemClock_Config+0x100>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <SystemClock_Config+0x104>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000616:	4a2a      	ldr	r2, [pc, #168]	; (80006c0 <SystemClock_Config+0x104>)
 8000618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0x104>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062a:	2301      	movs	r3, #1
 800062c:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000632:	657b      	str	r3, [r7, #84]	; 0x54
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	66bb      	str	r3, [r7, #104]	; 0x68
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000638:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063c:	66fb      	str	r3, [r7, #108]	; 0x6c
	  RCC_OscInitStruct.PLL.PLLM = 4;
 800063e:	2304      	movs	r3, #4
 8000640:	673b      	str	r3, [r7, #112]	; 0x70
	  RCC_OscInitStruct.PLL.PLLN = 72;
 8000642:	2348      	movs	r3, #72	; 0x48
 8000644:	677b      	str	r3, [r7, #116]	; 0x74
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	67bb      	str	r3, [r7, #120]	; 0x78
	  RCC_OscInitStruct.PLL.PLLQ = 3;
 800064a:	2303      	movs	r3, #3
 800064c:	67fb      	str	r3, [r7, #124]	; 0x7c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f9a8 	bl	80009a8 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xa6>
	  {
	    Error_Handler();
 800065e:	f000 f831 	bl	80006c4 <Error_Handler>
	  }
	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	63fb      	str	r3, [r7, #60]	; 0x3c
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000678:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800067c:	2102      	movs	r1, #2
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fc0a 	bl	8000e98 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xd2>
	  {
	    Error_Handler();
 800068a:	f000 f81b 	bl	80006c4 <Error_Handler>
	  }
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800068e:	2308      	movs	r3, #8
 8000690:	60fb      	str	r3, [r7, #12]
	  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000692:	2332      	movs	r3, #50	; 0x32
 8000694:	61fb      	str	r3, [r7, #28]
	  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
	  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800069a:	2300      	movs	r3, #0
 800069c:	633b      	str	r3, [r7, #48]	; 0x30
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fdc0 	bl	8001228 <HAL_RCCEx_PeriphCLKConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xf6>
	  {
	    Error_Handler();
 80006ae:	f000 f809 	bl	80006c4 <Error_Handler>
	  }
}
 80006b2:	bf00      	nop
 80006b4:	3780      	adds	r7, #128	; 0x80
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <Error_Handler>:

void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	e7fe      	b.n	80006cc <Error_Handler+0x8>

080006ce <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <NMI_Handler+0x4>

080006d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <HardFault_Handler+0x4>

080006da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <MemManage_Handler+0x4>

080006e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <BusFault_Handler+0x4>

080006e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <UsageFault_Handler+0x4>

080006ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071a:	f000 f86f 	bl	80007fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <SystemInit+0x20>)
 800072a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <SystemInit+0x20>)
 8000730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000780 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800074e:	490e      	ldr	r1, [pc, #56]	; (8000788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000750:	4a0e      	ldr	r2, [pc, #56]	; (800078c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000764:	4c0b      	ldr	r4, [pc, #44]	; (8000794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000772:	f7ff ffd7 	bl	8000724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000776:	f000 ff15 	bl	80015a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800077a:	f7ff feb3 	bl	80004e4 <main>
  bx  lr    
 800077e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000780:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800078c:	08001634 	.word	0x08001634
  ldr r2, =_sbss
 8000790:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000794:	2000002c 	.word	0x2000002c

08000798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC_IRQHandler>
	...

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_InitTick+0x54>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_InitTick+0x58>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f8e8 	bl	8000990 <HAL_SYSTICK_Config>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00e      	b.n	80007e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d80a      	bhi.n	80007e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d0:	2200      	movs	r2, #0
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f000 f8be 	bl	8000958 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <HAL_InitTick+0x5c>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e000      	b.n	80007e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000008 	.word	0x20000008
 80007f8:	20000004 	.word	0x20000004

080007fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_IncTick+0x20>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_IncTick+0x24>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_IncTick+0x24>)
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000008 	.word	0x20000008
 8000820:	20000028 	.word	0x20000028

08000824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return uwTick;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <HAL_GetTick+0x14>)
 800082a:	681b      	ldr	r3, [r3, #0]
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000028 	.word	0x20000028

0800083c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <__NVIC_GetPriorityGrouping+0x18>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	0a1b      	lsrs	r3, r3, #8
 8000846:	f003 0307 	and.w	r3, r3, #7
}
 800084a:	4618      	mov	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	db0a      	blt.n	8000882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	b2da      	uxtb	r2, r3
 8000870:	490c      	ldr	r1, [pc, #48]	; (80008a4 <__NVIC_SetPriority+0x4c>)
 8000872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000876:	0112      	lsls	r2, r2, #4
 8000878:	b2d2      	uxtb	r2, r2
 800087a:	440b      	add	r3, r1
 800087c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000880:	e00a      	b.n	8000898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4908      	ldr	r1, [pc, #32]	; (80008a8 <__NVIC_SetPriority+0x50>)
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	f003 030f 	and.w	r3, r3, #15
 800088e:	3b04      	subs	r3, #4
 8000890:	0112      	lsls	r2, r2, #4
 8000892:	b2d2      	uxtb	r2, r2
 8000894:	440b      	add	r3, r1
 8000896:	761a      	strb	r2, [r3, #24]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000e100 	.word	0xe000e100
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b089      	sub	sp, #36	; 0x24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	f1c3 0307 	rsb	r3, r3, #7
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	bf28      	it	cs
 80008ca:	2304      	movcs	r3, #4
 80008cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3304      	adds	r3, #4
 80008d2:	2b06      	cmp	r3, #6
 80008d4:	d902      	bls.n	80008dc <NVIC_EncodePriority+0x30>
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3b03      	subs	r3, #3
 80008da:	e000      	b.n	80008de <NVIC_EncodePriority+0x32>
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e0:	f04f 32ff 	mov.w	r2, #4294967295
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43da      	mvns	r2, r3
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	401a      	ands	r2, r3
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f4:	f04f 31ff 	mov.w	r1, #4294967295
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	fa01 f303 	lsl.w	r3, r1, r3
 80008fe:	43d9      	mvns	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000904:	4313      	orrs	r3, r2
         );
}
 8000906:	4618      	mov	r0, r3
 8000908:	3724      	adds	r7, #36	; 0x24
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000924:	d301      	bcc.n	800092a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000926:	2301      	movs	r3, #1
 8000928:	e00f      	b.n	800094a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <SysTick_Config+0x40>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000932:	210f      	movs	r1, #15
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	f7ff ff8e 	bl	8000858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <SysTick_Config+0x40>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <SysTick_Config+0x40>)
 8000944:	2207      	movs	r2, #7
 8000946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	e000e010 	.word	0xe000e010

08000958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
 8000964:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800096a:	f7ff ff67 	bl	800083c <__NVIC_GetPriorityGrouping>
 800096e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	68b9      	ldr	r1, [r7, #8]
 8000974:	6978      	ldr	r0, [r7, #20]
 8000976:	f7ff ff99 	bl	80008ac <NVIC_EncodePriority>
 800097a:	4602      	mov	r2, r0
 800097c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff68 	bl	8000858 <__NVIC_SetPriority>
}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ffbb 	bl	8000914 <SysTick_Config>
 800099e:	4603      	mov	r3, r0
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d101      	bne.n	80009ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e264      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d075      	beq.n	8000ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009c6:	4ba3      	ldr	r3, [pc, #652]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	f003 030c 	and.w	r3, r3, #12
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d00c      	beq.n	80009ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009d2:	4ba0      	ldr	r3, [pc, #640]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009da:	2b08      	cmp	r3, #8
 80009dc:	d112      	bne.n	8000a04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009de:	4b9d      	ldr	r3, [pc, #628]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80009ea:	d10b      	bne.n	8000a04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009ec:	4b99      	ldr	r3, [pc, #612]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d05b      	beq.n	8000ab0 <HAL_RCC_OscConfig+0x108>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d157      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	e23f      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a0c:	d106      	bne.n	8000a1c <HAL_RCC_OscConfig+0x74>
 8000a0e:	4b91      	ldr	r3, [pc, #580]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a90      	ldr	r2, [pc, #576]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	e01d      	b.n	8000a58 <HAL_RCC_OscConfig+0xb0>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a24:	d10c      	bne.n	8000a40 <HAL_RCC_OscConfig+0x98>
 8000a26:	4b8b      	ldr	r3, [pc, #556]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a8a      	ldr	r2, [pc, #552]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a30:	6013      	str	r3, [r2, #0]
 8000a32:	4b88      	ldr	r3, [pc, #544]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a87      	ldr	r2, [pc, #540]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a3c:	6013      	str	r3, [r2, #0]
 8000a3e:	e00b      	b.n	8000a58 <HAL_RCC_OscConfig+0xb0>
 8000a40:	4b84      	ldr	r3, [pc, #528]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a83      	ldr	r2, [pc, #524]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	4b81      	ldr	r3, [pc, #516]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a80      	ldr	r2, [pc, #512]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d013      	beq.n	8000a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a60:	f7ff fee0 	bl	8000824 <HAL_GetTick>
 8000a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a66:	e008      	b.n	8000a7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a68:	f7ff fedc 	bl	8000824 <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	2b64      	cmp	r3, #100	; 0x64
 8000a74:	d901      	bls.n	8000a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000a76:	2303      	movs	r3, #3
 8000a78:	e204      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a7a:	4b76      	ldr	r3, [pc, #472]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0f0      	beq.n	8000a68 <HAL_RCC_OscConfig+0xc0>
 8000a86:	e014      	b.n	8000ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a88:	f7ff fecc 	bl	8000824 <HAL_GetTick>
 8000a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a8e:	e008      	b.n	8000aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a90:	f7ff fec8 	bl	8000824 <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	2b64      	cmp	r3, #100	; 0x64
 8000a9c:	d901      	bls.n	8000aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	e1f0      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aa2:	4b6c      	ldr	r3, [pc, #432]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1f0      	bne.n	8000a90 <HAL_RCC_OscConfig+0xe8>
 8000aae:	e000      	b.n	8000ab2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d063      	beq.n	8000b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000abe:	4b65      	ldr	r3, [pc, #404]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f003 030c 	and.w	r3, r3, #12
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d00b      	beq.n	8000ae2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000aca:	4b62      	ldr	r3, [pc, #392]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ad2:	2b08      	cmp	r3, #8
 8000ad4:	d11c      	bne.n	8000b10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ad6:	4b5f      	ldr	r3, [pc, #380]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d116      	bne.n	8000b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ae2:	4b5c      	ldr	r3, [pc, #368]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d005      	beq.n	8000afa <HAL_RCC_OscConfig+0x152>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d001      	beq.n	8000afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e1c4      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000afa:	4b56      	ldr	r3, [pc, #344]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	691b      	ldr	r3, [r3, #16]
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	4952      	ldr	r1, [pc, #328]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b0e:	e03a      	b.n	8000b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d020      	beq.n	8000b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b18:	4b4f      	ldr	r3, [pc, #316]	; (8000c58 <HAL_RCC_OscConfig+0x2b0>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b1e:	f7ff fe81 	bl	8000824 <HAL_GetTick>
 8000b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b24:	e008      	b.n	8000b38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b26:	f7ff fe7d 	bl	8000824 <HAL_GetTick>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d901      	bls.n	8000b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000b34:	2303      	movs	r3, #3
 8000b36:	e1a5      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b38:	4b46      	ldr	r3, [pc, #280]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f003 0302 	and.w	r3, r3, #2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d0f0      	beq.n	8000b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b44:	4b43      	ldr	r3, [pc, #268]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	691b      	ldr	r3, [r3, #16]
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	4940      	ldr	r1, [pc, #256]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000b54:	4313      	orrs	r3, r2
 8000b56:	600b      	str	r3, [r1, #0]
 8000b58:	e015      	b.n	8000b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b5a:	4b3f      	ldr	r3, [pc, #252]	; (8000c58 <HAL_RCC_OscConfig+0x2b0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b60:	f7ff fe60 	bl	8000824 <HAL_GetTick>
 8000b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b66:	e008      	b.n	8000b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b68:	f7ff fe5c 	bl	8000824 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d901      	bls.n	8000b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000b76:	2303      	movs	r3, #3
 8000b78:	e184      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b7a:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1f0      	bne.n	8000b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d030      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d016      	beq.n	8000bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b9a:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <HAL_RCC_OscConfig+0x2b4>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ba0:	f7ff fe40 	bl	8000824 <HAL_GetTick>
 8000ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ba6:	e008      	b.n	8000bba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ba8:	f7ff fe3c 	bl	8000824 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d901      	bls.n	8000bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e164      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bba:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d0f0      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x200>
 8000bc6:	e015      	b.n	8000bf4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <HAL_RCC_OscConfig+0x2b4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bce:	f7ff fe29 	bl	8000824 <HAL_GetTick>
 8000bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bd4:	e008      	b.n	8000be8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bd6:	f7ff fe25 	bl	8000824 <HAL_GetTick>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d901      	bls.n	8000be8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000be4:	2303      	movs	r3, #3
 8000be6:	e14d      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1f0      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f000 80a0 	beq.w	8000d42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10f      	bne.n	8000c32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_RCC_OscConfig+0x2ac>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_RCC_OscConfig+0x2b8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d121      	bne.n	8000c82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_RCC_OscConfig+0x2b8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_RCC_OscConfig+0x2b8>)
 8000c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c4a:	f7ff fdeb 	bl	8000824 <HAL_GetTick>
 8000c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c50:	e011      	b.n	8000c76 <HAL_RCC_OscConfig+0x2ce>
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	42470000 	.word	0x42470000
 8000c5c:	42470e80 	.word	0x42470e80
 8000c60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c64:	f7ff fdde 	bl	8000824 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d901      	bls.n	8000c76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e106      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c76:	4b85      	ldr	r3, [pc, #532]	; (8000e8c <HAL_RCC_OscConfig+0x4e4>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f0      	beq.n	8000c64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d106      	bne.n	8000c98 <HAL_RCC_OscConfig+0x2f0>
 8000c8a:	4b81      	ldr	r3, [pc, #516]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c8e:	4a80      	ldr	r2, [pc, #512]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6713      	str	r3, [r2, #112]	; 0x70
 8000c96:	e01c      	b.n	8000cd2 <HAL_RCC_OscConfig+0x32a>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	d10c      	bne.n	8000cba <HAL_RCC_OscConfig+0x312>
 8000ca0:	4b7b      	ldr	r3, [pc, #492]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ca4:	4a7a      	ldr	r2, [pc, #488]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6713      	str	r3, [r2, #112]	; 0x70
 8000cac:	4b78      	ldr	r3, [pc, #480]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cb0:	4a77      	ldr	r2, [pc, #476]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8000cb8:	e00b      	b.n	8000cd2 <HAL_RCC_OscConfig+0x32a>
 8000cba:	4b75      	ldr	r3, [pc, #468]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cbe:	4a74      	ldr	r2, [pc, #464]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000cc0:	f023 0301 	bic.w	r3, r3, #1
 8000cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8000cc6:	4b72      	ldr	r3, [pc, #456]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cca:	4a71      	ldr	r2, [pc, #452]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000ccc:	f023 0304 	bic.w	r3, r3, #4
 8000cd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d015      	beq.n	8000d06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cda:	f7ff fda3 	bl	8000824 <HAL_GetTick>
 8000cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ce0:	e00a      	b.n	8000cf8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ce2:	f7ff fd9f 	bl	8000824 <HAL_GetTick>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d901      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e0c5      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cf8:	4b65      	ldr	r3, [pc, #404]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0ee      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x33a>
 8000d04:	e014      	b.n	8000d30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d06:	f7ff fd8d 	bl	8000824 <HAL_GetTick>
 8000d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d0c:	e00a      	b.n	8000d24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d0e:	f7ff fd89 	bl	8000824 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d901      	bls.n	8000d24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000d20:	2303      	movs	r3, #3
 8000d22:	e0af      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d24:	4b5a      	ldr	r3, [pc, #360]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1ee      	bne.n	8000d0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d30:	7dfb      	ldrb	r3, [r7, #23]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d105      	bne.n	8000d42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d36:	4b56      	ldr	r3, [pc, #344]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a55      	ldr	r2, [pc, #340]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 809b 	beq.w	8000e82 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d4c:	4b50      	ldr	r3, [pc, #320]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	f003 030c 	and.w	r3, r3, #12
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	d05c      	beq.n	8000e12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d141      	bne.n	8000de4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d60:	4b4c      	ldr	r3, [pc, #304]	; (8000e94 <HAL_RCC_OscConfig+0x4ec>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d66:	f7ff fd5d 	bl	8000824 <HAL_GetTick>
 8000d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d6c:	e008      	b.n	8000d80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d6e:	f7ff fd59 	bl	8000824 <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d901      	bls.n	8000d80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e081      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d80:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1f0      	bne.n	8000d6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69da      	ldr	r2, [r3, #28]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	431a      	orrs	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9a:	019b      	lsls	r3, r3, #6
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	085b      	lsrs	r3, r3, #1
 8000da4:	3b01      	subs	r3, #1
 8000da6:	041b      	lsls	r3, r3, #16
 8000da8:	431a      	orrs	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	061b      	lsls	r3, r3, #24
 8000db0:	4937      	ldr	r1, [pc, #220]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000db2:	4313      	orrs	r3, r2
 8000db4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000db6:	4b37      	ldr	r3, [pc, #220]	; (8000e94 <HAL_RCC_OscConfig+0x4ec>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fd32 	bl	8000824 <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc4:	f7ff fd2e 	bl	8000824 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e056      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f0      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x41c>
 8000de2:	e04e      	b.n	8000e82 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <HAL_RCC_OscConfig+0x4ec>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dea:	f7ff fd1b 	bl	8000824 <HAL_GetTick>
 8000dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000df0:	e008      	b.n	8000e04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000df2:	f7ff fd17 	bl	8000824 <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d901      	bls.n	8000e04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e03f      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f0      	bne.n	8000df2 <HAL_RCC_OscConfig+0x44a>
 8000e10:	e037      	b.n	8000e82 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d101      	bne.n	8000e1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e032      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <HAL_RCC_OscConfig+0x4e8>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d028      	beq.n	8000e7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d121      	bne.n	8000e7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d11a      	bne.n	8000e7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000e4e:	4013      	ands	r3, r2
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e54:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d111      	bne.n	8000e7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e64:	085b      	lsrs	r3, r3, #1
 8000e66:	3b01      	subs	r3, #1
 8000e68:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d107      	bne.n	8000e7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d001      	beq.n	8000e82 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40007000 	.word	0x40007000
 8000e90:	40023800 	.word	0x40023800
 8000e94:	42470060 	.word	0x42470060

08000e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e0cc      	b.n	8001046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000eac:	4b68      	ldr	r3, [pc, #416]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 030f 	and.w	r3, r3, #15
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d90c      	bls.n	8000ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eba:	4b65      	ldr	r3, [pc, #404]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ec2:	4b63      	ldr	r3, [pc, #396]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d001      	beq.n	8000ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e0b8      	b.n	8001046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d020      	beq.n	8000f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d005      	beq.n	8000ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000eec:	4b59      	ldr	r3, [pc, #356]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	4a58      	ldr	r2, [pc, #352]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000ef2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000ef6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d005      	beq.n	8000f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f04:	4b53      	ldr	r3, [pc, #332]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	4a52      	ldr	r2, [pc, #328]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000f0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f10:	4b50      	ldr	r3, [pc, #320]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	494d      	ldr	r1, [pc, #308]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d044      	beq.n	8000fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d107      	bne.n	8000f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f36:	4b47      	ldr	r3, [pc, #284]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d119      	bne.n	8000f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e07f      	b.n	8001046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d003      	beq.n	8000f56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d107      	bne.n	8000f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f56:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d109      	bne.n	8000f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e06f      	b.n	8001046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f66:	4b3b      	ldr	r3, [pc, #236]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e067      	b.n	8001046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f76:	4b37      	ldr	r3, [pc, #220]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f023 0203 	bic.w	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	4934      	ldr	r1, [pc, #208]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000f84:	4313      	orrs	r3, r2
 8000f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f88:	f7ff fc4c 	bl	8000824 <HAL_GetTick>
 8000f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f8e:	e00a      	b.n	8000fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f90:	f7ff fc48 	bl	8000824 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e04f      	b.n	8001046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 020c 	and.w	r2, r3, #12
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d1eb      	bne.n	8000f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000fb8:	4b25      	ldr	r3, [pc, #148]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d20c      	bcs.n	8000fe0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d001      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e032      	b.n	8001046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d008      	beq.n	8000ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	4916      	ldr	r1, [pc, #88]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	2b00      	cmp	r3, #0
 8001008:	d009      	beq.n	800101e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	490e      	ldr	r1, [pc, #56]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 800101a:	4313      	orrs	r3, r2
 800101c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800101e:	f000 f821 	bl	8001064 <HAL_RCC_GetSysClockFreq>
 8001022:	4602      	mov	r2, r0
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	490a      	ldr	r1, [pc, #40]	; (8001058 <HAL_RCC_ClockConfig+0x1c0>)
 8001030:	5ccb      	ldrb	r3, [r1, r3]
 8001032:	fa22 f303 	lsr.w	r3, r2, r3
 8001036:	4a09      	ldr	r2, [pc, #36]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8001038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_RCC_ClockConfig+0x1c8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fbac 	bl	800079c <HAL_InitTick>

  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023c00 	.word	0x40023c00
 8001054:	40023800 	.word	0x40023800
 8001058:	08001614 	.word	0x08001614
 800105c:	20000000 	.word	0x20000000
 8001060:	20000004 	.word	0x20000004

08001064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001064:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001068:	b084      	sub	sp, #16
 800106a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800107c:	4b67      	ldr	r3, [pc, #412]	; (800121c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b08      	cmp	r3, #8
 8001086:	d00d      	beq.n	80010a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001088:	2b08      	cmp	r3, #8
 800108a:	f200 80bd 	bhi.w	8001208 <HAL_RCC_GetSysClockFreq+0x1a4>
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <HAL_RCC_GetSysClockFreq+0x34>
 8001092:	2b04      	cmp	r3, #4
 8001094:	d003      	beq.n	800109e <HAL_RCC_GetSysClockFreq+0x3a>
 8001096:	e0b7      	b.n	8001208 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001098:	4b61      	ldr	r3, [pc, #388]	; (8001220 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800109a:	60bb      	str	r3, [r7, #8]
       break;
 800109c:	e0b7      	b.n	800120e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800109e:	4b61      	ldr	r3, [pc, #388]	; (8001224 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80010a0:	60bb      	str	r3, [r7, #8]
      break;
 80010a2:	e0b4      	b.n	800120e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010a4:	4b5d      	ldr	r3, [pc, #372]	; (800121c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010ae:	4b5b      	ldr	r3, [pc, #364]	; (800121c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d04d      	beq.n	8001156 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010ba:	4b58      	ldr	r3, [pc, #352]	; (800121c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	099b      	lsrs	r3, r3, #6
 80010c0:	461a      	mov	r2, r3
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80010ca:	f04f 0100 	mov.w	r1, #0
 80010ce:	ea02 0800 	and.w	r8, r2, r0
 80010d2:	ea03 0901 	and.w	r9, r3, r1
 80010d6:	4640      	mov	r0, r8
 80010d8:	4649      	mov	r1, r9
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	f04f 0300 	mov.w	r3, #0
 80010e2:	014b      	lsls	r3, r1, #5
 80010e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80010e8:	0142      	lsls	r2, r0, #5
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	ebb0 0008 	subs.w	r0, r0, r8
 80010f2:	eb61 0109 	sbc.w	r1, r1, r9
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	018b      	lsls	r3, r1, #6
 8001100:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001104:	0182      	lsls	r2, r0, #6
 8001106:	1a12      	subs	r2, r2, r0
 8001108:	eb63 0301 	sbc.w	r3, r3, r1
 800110c:	f04f 0000 	mov.w	r0, #0
 8001110:	f04f 0100 	mov.w	r1, #0
 8001114:	00d9      	lsls	r1, r3, #3
 8001116:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800111a:	00d0      	lsls	r0, r2, #3
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	eb12 0208 	adds.w	r2, r2, r8
 8001124:	eb43 0309 	adc.w	r3, r3, r9
 8001128:	f04f 0000 	mov.w	r0, #0
 800112c:	f04f 0100 	mov.w	r1, #0
 8001130:	0259      	lsls	r1, r3, #9
 8001132:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001136:	0250      	lsls	r0, r2, #9
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	461a      	mov	r2, r3
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	f7ff f850 	bl	80001ec <__aeabi_uldivmod>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4613      	mov	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	e04a      	b.n	80011ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001156:	4b31      	ldr	r3, [pc, #196]	; (800121c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	099b      	lsrs	r3, r3, #6
 800115c:	461a      	mov	r2, r3
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001166:	f04f 0100 	mov.w	r1, #0
 800116a:	ea02 0400 	and.w	r4, r2, r0
 800116e:	ea03 0501 	and.w	r5, r3, r1
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	014b      	lsls	r3, r1, #5
 8001180:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001184:	0142      	lsls	r2, r0, #5
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	1b00      	subs	r0, r0, r4
 800118c:	eb61 0105 	sbc.w	r1, r1, r5
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	018b      	lsls	r3, r1, #6
 800119a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800119e:	0182      	lsls	r2, r0, #6
 80011a0:	1a12      	subs	r2, r2, r0
 80011a2:	eb63 0301 	sbc.w	r3, r3, r1
 80011a6:	f04f 0000 	mov.w	r0, #0
 80011aa:	f04f 0100 	mov.w	r1, #0
 80011ae:	00d9      	lsls	r1, r3, #3
 80011b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80011b4:	00d0      	lsls	r0, r2, #3
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	1912      	adds	r2, r2, r4
 80011bc:	eb45 0303 	adc.w	r3, r5, r3
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	f04f 0100 	mov.w	r1, #0
 80011c8:	0299      	lsls	r1, r3, #10
 80011ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80011ce:	0290      	lsls	r0, r2, #10
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	461a      	mov	r2, r3
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	f7ff f804 	bl	80001ec <__aeabi_uldivmod>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4613      	mov	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	0c1b      	lsrs	r3, r3, #16
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	3301      	adds	r3, #1
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	fbb2 f3f3 	udiv	r3, r2, r3
 8001204:	60bb      	str	r3, [r7, #8]
      break;
 8001206:	e002      	b.n	800120e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800120a:	60bb      	str	r3, [r7, #8]
      break;
 800120c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800120e:	68bb      	ldr	r3, [r7, #8]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	00f42400 	.word	0x00f42400
 8001224:	007a1200 	.word	0x007a1200

08001228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10b      	bne.n	800125c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001258:	2b00      	cmp	r3, #0
 800125a:	d075      	beq.n	8001348 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800125c:	4bad      	ldr	r3, [pc, #692]	; (8001514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001262:	f7ff fadf 	bl	8000824 <HAL_GetTick>
 8001266:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001268:	e008      	b.n	800127c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800126a:	f7ff fadb 	bl	8000824 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e18b      	b.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800127c:	4ba6      	ldr	r3, [pc, #664]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f0      	bne.n	800126a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	d009      	beq.n	80012a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	019a      	lsls	r2, r3, #6
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	071b      	lsls	r3, r3, #28
 80012a0:	499d      	ldr	r1, [pc, #628]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d01f      	beq.n	80012f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80012b4:	4b98      	ldr	r3, [pc, #608]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012ba:	0f1b      	lsrs	r3, r3, #28
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	019a      	lsls	r2, r3, #6
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	061b      	lsls	r3, r3, #24
 80012ce:	431a      	orrs	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	071b      	lsls	r3, r3, #28
 80012d4:	4990      	ldr	r1, [pc, #576]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80012dc:	4b8e      	ldr	r3, [pc, #568]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012e2:	f023 021f 	bic.w	r2, r3, #31
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	498a      	ldr	r1, [pc, #552]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00d      	beq.n	800131c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	019a      	lsls	r2, r3, #6
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	061b      	lsls	r3, r3, #24
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	071b      	lsls	r3, r3, #28
 8001314:	4980      	ldr	r1, [pc, #512]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001316:	4313      	orrs	r3, r2
 8001318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800131c:	4b7d      	ldr	r3, [pc, #500]	; (8001514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001322:	f7ff fa7f 	bl	8000824 <HAL_GetTick>
 8001326:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001328:	e008      	b.n	800133c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800132a:	f7ff fa7b 	bl	8000824 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e12b      	b.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800133c:	4b76      	ldr	r3, [pc, #472]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d105      	bne.n	8001360 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800135c:	2b00      	cmp	r3, #0
 800135e:	d079      	beq.n	8001454 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001360:	4b6e      	ldr	r3, [pc, #440]	; (800151c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001366:	f7ff fa5d 	bl	8000824 <HAL_GetTick>
 800136a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800136e:	f7ff fa59 	bl	8000824 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e109      	b.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001380:	4b65      	ldr	r3, [pc, #404]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800138c:	d0ef      	beq.n	800136e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	d020      	beq.n	80013dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800139c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a0:	0f1b      	lsrs	r3, r3, #28
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	019a      	lsls	r2, r3, #6
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	061b      	lsls	r3, r3, #24
 80013b4:	431a      	orrs	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	071b      	lsls	r3, r3, #28
 80013ba:	4957      	ldr	r1, [pc, #348]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80013c2:	4b55      	ldr	r3, [pc, #340]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	4950      	ldr	r1, [pc, #320]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d01e      	beq.n	8001426 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80013e8:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ee:	0e1b      	lsrs	r3, r3, #24
 80013f0:	f003 030f 	and.w	r3, r3, #15
 80013f4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	019a      	lsls	r2, r3, #6
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	061b      	lsls	r3, r3, #24
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	071b      	lsls	r3, r3, #28
 8001408:	4943      	ldr	r1, [pc, #268]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800140a:	4313      	orrs	r3, r2
 800140c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001410:	4b41      	ldr	r3, [pc, #260]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001416:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	493e      	ldr	r1, [pc, #248]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001420:	4313      	orrs	r3, r2
 8001422:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001426:	4b3d      	ldr	r3, [pc, #244]	; (800151c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800142c:	f7ff f9fa 	bl	8000824 <HAL_GetTick>
 8001430:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001434:	f7ff f9f6 	bl	8000824 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e0a6      	b.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001446:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800144e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001452:	d1ef      	bne.n	8001434 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0320 	and.w	r3, r3, #32
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 808d 	beq.w	800157c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a2b      	ldr	r2, [pc, #172]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800147e:	4b28      	ldr	r3, [pc, #160]	; (8001520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a27      	ldr	r2, [pc, #156]	; (8001520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001488:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800148a:	f7ff f9cb 	bl	8000824 <HAL_GetTick>
 800148e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001492:	f7ff f9c7 	bl	8000824 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e077      	b.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80014b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d039      	beq.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d032      	beq.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80014e4:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d11e      	bne.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff f995 	bl	8000824 <HAL_GetTick>
 80014fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fc:	e014      	b.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff f991 	bl	8000824 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f241 3288 	movw	r2, #5000	; 0x1388
 800150c:	4293      	cmp	r3, r2
 800150e:	d90b      	bls.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e03f      	b.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8001514:	42470068 	.word	0x42470068
 8001518:	40023800 	.word	0x40023800
 800151c:	42470070 	.word	0x42470070
 8001520:	40007000 	.word	0x40007000
 8001524:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0e4      	beq.n	80014fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800153c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001540:	d10d      	bne.n	800155e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001556:	4911      	ldr	r1, [pc, #68]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001558:	4313      	orrs	r3, r2
 800155a:	608b      	str	r3, [r1, #8]
 800155c:	e005      	b.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001564:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001568:	6093      	str	r3, [r2, #8]
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800156c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001576:	4909      	ldr	r1, [pc, #36]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001578:	4313      	orrs	r3, r2
 800157a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	2b00      	cmp	r3, #0
 8001586:	d004      	beq.n	8001592 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001590:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	424711e0 	.word	0x424711e0

080015a4 <__libc_init_array>:
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	4d0d      	ldr	r5, [pc, #52]	; (80015dc <__libc_init_array+0x38>)
 80015a8:	4c0d      	ldr	r4, [pc, #52]	; (80015e0 <__libc_init_array+0x3c>)
 80015aa:	1b64      	subs	r4, r4, r5
 80015ac:	10a4      	asrs	r4, r4, #2
 80015ae:	2600      	movs	r6, #0
 80015b0:	42a6      	cmp	r6, r4
 80015b2:	d109      	bne.n	80015c8 <__libc_init_array+0x24>
 80015b4:	4d0b      	ldr	r5, [pc, #44]	; (80015e4 <__libc_init_array+0x40>)
 80015b6:	4c0c      	ldr	r4, [pc, #48]	; (80015e8 <__libc_init_array+0x44>)
 80015b8:	f000 f820 	bl	80015fc <_init>
 80015bc:	1b64      	subs	r4, r4, r5
 80015be:	10a4      	asrs	r4, r4, #2
 80015c0:	2600      	movs	r6, #0
 80015c2:	42a6      	cmp	r6, r4
 80015c4:	d105      	bne.n	80015d2 <__libc_init_array+0x2e>
 80015c6:	bd70      	pop	{r4, r5, r6, pc}
 80015c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015cc:	4798      	blx	r3
 80015ce:	3601      	adds	r6, #1
 80015d0:	e7ee      	b.n	80015b0 <__libc_init_array+0xc>
 80015d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015d6:	4798      	blx	r3
 80015d8:	3601      	adds	r6, #1
 80015da:	e7f2      	b.n	80015c2 <__libc_init_array+0x1e>
 80015dc:	0800162c 	.word	0x0800162c
 80015e0:	0800162c 	.word	0x0800162c
 80015e4:	0800162c 	.word	0x0800162c
 80015e8:	08001630 	.word	0x08001630

080015ec <memset>:
 80015ec:	4402      	add	r2, r0
 80015ee:	4603      	mov	r3, r0
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d100      	bne.n	80015f6 <memset+0xa>
 80015f4:	4770      	bx	lr
 80015f6:	f803 1b01 	strb.w	r1, [r3], #1
 80015fa:	e7f9      	b.n	80015f0 <memset+0x4>

080015fc <_init>:
 80015fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fe:	bf00      	nop
 8001600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001602:	bc08      	pop	{r3}
 8001604:	469e      	mov	lr, r3
 8001606:	4770      	bx	lr

08001608 <_fini>:
 8001608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160a:	bf00      	nop
 800160c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800160e:	bc08      	pop	{r3}
 8001610:	469e      	mov	lr, r3
 8001612:	4770      	bx	lr
